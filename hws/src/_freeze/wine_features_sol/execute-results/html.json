{
  "hash": "b46ac73f2caeeb2bf3c910b214ebc02b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Wine Features\"\nauthor: \"Calvin Deutschbein\"\ndate: \"02/03/2025\"\n\nformat: \n  html:  # You will quite likely want to change all but the last one, to taste\n    theme: superhero  \n    mainfont: monospace\n    highlight-style: github\n    title-block-banner: true\n    embed-resources: true\n\n---\n\n\n\n**Abstract:**\n\nThis is a technical blog post of **both** an HTML file *and* [.qmd file](src/wine_features.qmd) hosted on GitHub pages.\n\n# Setup\n\n**Step Up Code:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsh <- suppressPackageStartupMessages\nsh(library(tidyverse))\nsh(library(caret))\nsh(library(fastDummies))\nwine <- readRDS(gzcon(url(\"https://github.com/cd-public/D505/raw/master/dat/wine.rds\")))\n```\n:::\n\n\n\n**Explanataion:**\n\n> We will proceed as follows:<br>\n- Suppress `library` load warnings, as we addressed them prior to publication.<br>\n- Use Tidy data sets via the `tidyverse` package<br>\n- Perform classification and regression via the `caret` package<br>\n- Engineer features via the `fastDummies` package<br>\n- Load in the `wine.rds` dataframe, hosted publicly on [GitHub](https://github.com/cd-public/D505/raw/master/dat/wine.rds).\n\n# Feature Engineering\n\nWe begin by engineering an number of features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwino <- wine %>% \n  mutate(lprice=log(price), description = tolower(description)) %>%\n  select(lprice, description)\n```\n:::\n\n\n\n1. Create a total of 10 features (including points). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnotes <- c(\"smoke\", \"spice\", \"pepper\", \"grass\", \"tannic\", \"crisp\", \"acidic\", \"bright\", \"smooth\")\nfor (note in notes) {\n  wino <- wino %>%\n    mutate(!!sym(note) := str_detect(description, note))\n}\nhead(wino)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  lprice description  smoke spice pepper grass tannic crisp acidic bright smooth\n   <dbl> <chr>        <lgl> <lgl> <lgl>  <lgl> <lgl>  <lgl> <lgl>  <lgl>  <lgl> \n1   2.71 this is rip… FALSE FALSE FALSE  FALSE FALSE  FALSE FALSE  FALSE  TRUE  \n2   2.64 tart and sn… FALSE FALSE FALSE  FALSE FALSE  TRUE  FALSE  FALSE  FALSE \n3   2.56 pineapple r… FALSE FALSE FALSE  FALSE FALSE  FALSE FALSE  FALSE  FALSE \n4   4.17 much like t… FALSE FALSE FALSE  FALSE TRUE   FALSE FALSE  FALSE  FALSE \n5   2.71 blackberry … FALSE FALSE FALSE  FALSE FALSE  FALSE FALSE  FALSE  FALSE \n6   2.77 here's a br… FALSE FALSE TRUE   FALSE FALSE  FALSE FALSE  TRUE   FALSE \n```\n\n\n:::\n:::\n\n\n\n2. Remove all rows with a missing value. \n3. Ensure only log(price) and engineering features are the only columns that remain in the `wino` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwino <- wino %>% select(-description) %>% drop_na(.)\n```\n:::\n\n\n\n# Caret\n\nWe now use a train/test split to evaluate the features.\n\n1. Use the Caret library to partition the wino dataframe into an 80/20 split. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(505)  # For reproducibility\ntrainIndex <- createDataPartition(wino$lprice, p = 0.8, list = FALSE)\ntrainData <- wino[trainIndex, ]\ntestData <- wino[-trainIndex, ]\n```\n:::\n\n\n\n2. Run a linear regression with bootstrap resampling. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(warn=-1)\nmodel <- train(lprice ~ ., data = trainData, method = \"lm\", trControl = trainControl(method = \"boot\", number = 5))\noptions(warn=0)\n```\n:::\n\n\n\n3. Report RMSE on the test partition of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(mean((predict(model, newdata = testData) - testData$lprice)^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6475555\n```\n\n\n:::\n:::\n\n\n\n# Variable selection\n\nWe now graph the importance of our 10 features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(varImp(model))\n```\n\n::: {.cell-output-display}\n![](wine_features_sol_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}