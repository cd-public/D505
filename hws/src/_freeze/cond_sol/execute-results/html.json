{
  "hash": "6f2ac2fef517d6e59dff2b5dbe153b93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conditional Probability\"\nauthor: \"Prof. Calvin\"\ndate: \"02/17/2025\"\n---\n\n\n\n**Abstract:**\n\n- This is a technical blog post of **both** an HTML file *and* [.qmd file](https://raw.githubusercontent.com/cd-public/D505/refs/heads/master/hws/src/cond_sols.qmd) hosted on GitHub pages.\n\n# 0. Quarto Type-setting\n\n- This document is rendered with Quarto, and configured to embed an images using the `embed-resources` option in the header.\n- If you wish to use a similar header, here's is the format specification for this document:\n\n```email\nformat: \n  html:\n    embed-resources: true\n```\n\n# 1. Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsh <- suppressPackageStartupMessages\nsh(library(tidyverse))\nsh(library(caret))\nsh(library(naivebayes)) # bae caught me naivin'\nsh(library(tidytext))\nwine <- readRDS(gzcon(url(\"https://github.com/cd-public/D505/raw/master/dat/pinot.rds\")))\n```\n:::\n\n\n\n# 2. Conditional Probability\n\n- Calculate the probability that a Pinot comes from Burgundy given it has the word 'fruit' in the description.\n  - Take $A$ to be the probability that a Pinot was grown in Burgundy.\n  - Take $B$ to be the probability that Pinot has the word 'fruit' in it's description.\n\n$$\nP(A|B)\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(filter(wine,province==\"Burgundy\" & str_detect(description,\"fruit\")))/nrow(filter(wine, str_detect(description,\"fruit\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2196038\n```\n\n\n:::\n:::\n\n\n\n# 3. Naive Bayes Algorithm\n\n- We train a naive bayes algorithm to classify a wine's province using:\n\n1. An 80-20 train-test split.\n2. Three features engineered from the description\n3. 5-fold cross validation.\n\n- We report Kappa after using the model to predict provinces in the holdout sample.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwino = wine %>% \n  mutate(cherry = str_detect(description,\"cherry\")) %>% \n  mutate(chocolate = str_detect(description,\"chocolate\")) %>%\n  mutate(earth = str_detect(description,\"earth\")) %>%\n  select(-description)\n\nwine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)\ntrain <- wino[ wine_index, ]\ntest <- wino[-wine_index, ]\n\nfit <- train(province ~ .,\n             data = train, \n             method = \"naive_bayes\",\n             metric = \"Kappa\",\n             trControl = trainControl(method = \"cv\", number = 5))\n\nconfusionMatrix(predict(fit, test),factor(test$province))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n                   Reference\nPrediction          Burgundy California Casablanca_Valley Marlborough New_York\n  Burgundy               148         69                10          13        3\n  California              75        699                 8          21       12\n  Casablanca_Valley        3          4                 0           0        1\n  Marlborough              0          1                 2           2        0\n  New_York                 5          3                 4           5       10\n  Oregon                   7         15                 2           4        0\n                   Reference\nPrediction          Oregon\n  Burgundy              84\n  California           315\n  Casablanca_Valley      2\n  Marlborough            8\n  New_York               7\n  Oregon               131\n\nOverall Statistics\n                                          \n               Accuracy : 0.5918          \n                 95% CI : (0.5678, 0.6154)\n    No Information Rate : 0.4728          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.3428          \n                                          \n Mcnemar's Test P-Value : < 2.2e-16       \n\nStatistics by Class:\n\n                     Class: Burgundy Class: California Class: Casablanca_Valley\nSensitivity                  0.62185            0.8837                 0.000000\nSpecificity                  0.87526            0.5113                 0.993928\nPos Pred Value               0.45260            0.6186                 0.000000\nNeg Pred Value               0.93314            0.8306                 0.984366\nPrevalence                   0.14226            0.4728                 0.015541\nDetection Rate               0.08846            0.4178                 0.000000\nDetection Prevalence         0.19546            0.6754                 0.005977\nBalanced Accuracy            0.74856            0.6975                 0.496964\n                     Class: Marlborough Class: New_York Class: Oregon\nSensitivity                    0.044444        0.384615       0.23949\nSpecificity                    0.993243        0.985428       0.97513\nPos Pred Value                 0.153846        0.294118       0.82390\nNeg Pred Value                 0.974096        0.990238       0.72523\nPrevalence                     0.026898        0.015541       0.32696\nDetection Rate                 0.001195        0.005977       0.07830\nDetection Prevalence           0.007770        0.020323       0.09504\nBalanced Accuracy              0.518844        0.685022       0.60731\n```\n\n\n:::\n:::\n\n\n\n\n# 4. Frequency Differences\n\n- We find the three words that most distinguish New York Pinots from all other Pinots.\n\n> Calculate relative word count.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwc <- function(df, omits) {\n  count <- nrow(df)\n  df %>%\n    unnest_tokens(word, description) %>% anti_join(stop_words) %>%\n    filter(!(word %in% omits)) %>% \n    group_by(word) %>% mutate(total=n()) %>% count() %>%\n    ungroup() %>% mutate(n=n/count)\n}\n```\n:::\n\n\n\n> Make corresponding dataframes.\n    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nomits = c(\"pinot\", \"noir\", \"wine\")\nwc_ny <- wc(wine %>% filter(province==\"New_York\") %>% select(description), omits)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(word)`\n```\n\n\n:::\n\n```{.r .cell-code}\nwc_no <- wc(wine %>% filter(province!=\"New_York\") %>% select(description), omits)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(word)`\n```\n\n\n:::\n:::\n\n\n> Calculate difference in relative frequencies.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiff <- wc_ny %>%\n    inner_join(wc_no, by = \"word\", suffix = c(\"_ny\", \"_no\")) %>%\n    mutate(diff = n_ny - n_no) %>%\n    arrange(desc(abs(diff)))\n    \ndiff %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 4\n  word     n_ny  n_no  diff\n  <chr>   <dbl> <dbl> <dbl>\n1 cherry  0.916 0.431 0.485\n2 tannins 0.580 0.234 0.346\n3 palate  0.565 0.239 0.326\n```\n\n\n:::\n:::\n\n\n\n> Plot it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsh(library(plotly))\n\nplot_ly(diff %>% top_n(25, diff), \n        x = ~n_ny, y = ~n_no, z = ~diff, text = ~word, \n        type = 'scatter3d', mode = 'markers+text', \n        marker = list(size = 5, color = ~diff, showscale = TRUE)) %>%\n    layout(title = \"3D Scatterplot of Word Frequencies\",\n           scene = list(\n               xaxis = list(title = \"Frequency in New York Pinots\"),\n               yaxis = list(title = \"Frequency in Other Pinots\"),\n               zaxis = list(title = \"Difference in Frequency\")\n           ))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-5c00362d0b35f1abb524\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5c00362d0b35f1abb524\">{\"x\":{\"visdat\":{\"4908281679ce\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"4908281679ce\",\"attrs\":{\"4908281679ce\":{\"x\":{},\"y\":{},\"z\":{},\"text\":{},\"mode\":\"markers+text\",\"marker\":{\"size\":5,\"color\":{},\"showscale\":true},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"3D Scatterplot of Word Frequencies\",\"scene\":{\"xaxis\":{\"title\":\"Frequency in New York Pinots\"},\"yaxis\":{\"title\":\"Frequency in Other Pinots\"},\"zaxis\":{\"title\":\"Difference in Frequency\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[0.91603053435114501,0.58015267175572516,0.56488549618320616,0.37404580152671757,0.49618320610687022,0.22137404580152673,0.25954198473282442,0.17557251908396945,0.19083969465648856,0.16793893129770993,0.22900763358778625,0.38167938931297712,0.18320610687022901,0.14503816793893129,0.38931297709923662,0.22137404580152673,0.13740458015267176,0.15267175572519084,0.13740458015267176,0.12977099236641221,0.20610687022900764,0.10687022900763359,0.14503816793893129,0.099236641221374045,0.17557251908396945],\"y\":[0.43108255546126806,0.23433143411322585,0.23918050672808824,0.088738028851982065,0.23348284640562492,0.0027882167535458842,0.05903745908594981,0.0044853921687477271,0.030064250212146926,0.0081221966298945323,0.07164504788459207,0.22523942296035884,0.040126075887986425,0.0037580312765183657,0.25724330221845071,0.095041823251303184,0.014668444659958783,0.038186446842041456,0.023881682628197357,0.018426475936477147,0.097345132743362831,0.0018184022305734028,0.040368529518729546,0.0030306703842890048,0.080252151775972849],\"z\":[0.48494797888987695,0.34582123764249928,0.32570498945511794,0.2853077726747355,0.26270035970124528,0.21858582904798085,0.2005045256468746,0.17108712691522174,0.16077544444434164,0.1598167346678154,0.15736258570319417,0.15643996635261828,0.14308003098224259,0.14128013666241293,0.13206967488078591,0.12633222255022353,0.12273613549271298,0.11448530888314939,0.11352289752447441,0.11134451642993506,0.10876173748564481,0.10505182677706018,0.10466963842020174,0.096205970837085042,0.095320367307996604],\"text\":[\"cherry\",\"tannins\",\"palate\",\"notes\",\"finish\",\"brisk\",\"concentrated\",\"bramble\",\"delicate\",\"tones\",\"bright\",\"acidity\",\"crisp\",\"penetrating\",\"red\",\"soft\",\"violet\",\"fine\",\"finishes\",\"add\",\"fresh\",\"lend\",\"hints\",\"perfume\",\"dried\"],\"mode\":\"markers+text\",\"marker\":{\"color\":[0.48494797888987695,0.34582123764249928,0.32570498945511794,0.2853077726747355,0.26270035970124528,0.21858582904798085,0.2005045256468746,0.17108712691522174,0.16077544444434164,0.1598167346678154,0.15736258570319417,0.15643996635261828,0.14308003098224259,0.14128013666241293,0.13206967488078591,0.12633222255022353,0.12273613549271298,0.11448530888314939,0.11352289752447441,0.11134451642993506,0.10876173748564481,0.10505182677706018,0.10466963842020174,0.096205970837085042,0.095320367307996604],\"size\":5,\"showscale\":true,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter3d\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}