{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"$K$ Nearest Neighbors\"\n",
        "subtitle: \"Applied Machine Learning\"\n",
        "author: \"Jameson > Hendrik > Calvin\"\n",
        "  \n",
        "jupyter: python3\n",
        "\n",
        "execute:\n",
        "    echo: true\n",
        "    cache: true\n",
        "    freeze: true  # never re-render during project render\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "1. Review of Homeworks\n",
        "2. A human understanding of regression\n",
        "3. Dinner break\n",
        "5. Preprocessing and BoxCox\n",
        "6. The $K$NN algorithm and the Confusion Matrix\n",
        "\n",
        "# Homework\n",
        "\n",
        "## HW1\n",
        "\n",
        "- We need to work on writing quality.\n",
        "- We need to work on RMSE intepretation.\n",
        "- We need to work on using `summary` responsibly.\n",
        "- We need to work on applying lecture topics to leading questions.\n",
        "- We would benefit from use of the [`embed-resources`](https://quarto.org/docs/reference/formats/html.html) option in Quarto.\n",
        "\n",
        "## [HW1 Sols Posted](../hws/wine_of_pnw_sol.html)\n",
        "\n",
        "<iframe src=\"../hws/wine_of_pnw_sol.html\" height=\"500\" width=\"800\" title=\"Iframe Example\"></iframe> \n",
        "\n",
        "## HW2\n",
        "\n",
        "- Think\n",
        "- Pair\n",
        "- Share\n",
        "\n",
        "# Today\n",
        "\n",
        "## Setup\n",
        "\n",
        "## Import\n",
        "\n",
        "-   Python base data stack"
      ],
      "id": "bf166135"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "id": "da87b780",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-   R compatibility"
      ],
      "id": "775e1755"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pyreadr"
      ],
      "id": "9d01b197",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## ML Library"
      ],
      "id": "beacb5ca"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup\n",
        "\n",
        "-   `pyreadr` to read in an R dataset.\n"
      ],
      "id": "45841c2b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "url = 'https://cd-public.github.io/D505/dat/'\n",
        "rds = 'wine.rds'\n",
        "pyreadr.download_file(url + rds, rds) \n",
        "wine = pyreadr.read_r(rds)[None]      \n",
        "wine.dropna(subset=['points','price'])"
      ],
      "id": "7a9fc441",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "url = 'https://cd-public.github.io/D505/dat/'\n",
        "rds = 'wine.rds'\n",
        "pyreadr.download_file(url + rds, rds) \n",
        "wine = pyreadr.read_r(rds)[None]      \n",
        "wine['lprice'] = np.log(wine['price'])"
      ],
      "id": "ef5dfe76",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Reporting Impact from Regressions\n",
        "\n",
        "## Correlation\n",
        "\n",
        "[*Credit:* Modern Dive](https://moderndive.com/5-regression.html)\n",
        "\n",
        "[http://guessthecorrelation.com/](http://guessthecorrelation.com/) ...my high score is 72 (Jameson 122)\n",
        "\n",
        "![](./images/correlation.png)\n",
        "\n",
        "## Calculating correlation\n"
      ],
      "id": "c0a074aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "wine['price'].corr(wine['points']), wine['lprice'].corr(wine['points'])"
      ],
      "id": "9da4e86b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Exercise\n",
        "\n",
        "1. Calculate the correlation between $\\log$(price) and points... \n",
        "2. ...by variety...\n",
        "3. ...for Oregon Chardonnay, Pinot Noir and Pinot Gris...\n",
        "4. ...in the same expression!\n",
        "\n",
        "## Solution\n"
      ],
      "id": "adf52f4c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "filtered_wine = wine[(wine['province'] == \"Oregon\") & \n",
        "                     (wine['variety'].isin([\"Chardonnay\", \"Pinot Noir\", \"Pinot Gris\"]))]\n",
        "_ = filtered_wine.groupby('variety').apply(\n",
        "    lambda x: print(x['lprice'].corr(x['points'])))"
      ],
      "id": "3f50d7c4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Visualizing these different correlations\n",
        "\n",
        "\n",
        "```{r}\n",
        "#| output-location: slide\n",
        "wine %>% \n",
        "  filter(province==\"Oregon\") %>% \n",
        "  filter(variety %in% c(\"Chardonnay\",\"Pinot Noir\",\"Pinot Gris\")) %>% \n",
        "  ggplot(aes(points,lprice, color=variety)) +\n",
        "    geom_point(alpha=0.3)+\n",
        "    facet_wrap(~variety)+\n",
        "    geom_smooth(method = lm)\n",
        "    \n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Graphing residuals (bad)\n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- lm(price~points, filter(wine,province==\"Oregon\"))\n",
        "get_regression_points(model) %>% \n",
        "  ggplot(aes(points, residual))+\n",
        "    geom_point()\n",
        "```\n",
        "\n",
        "\n",
        "## Annotate\n",
        "\n",
        "![](images/spread.png)\n",
        "\n",
        "## Graphing residuals (good)\n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- lm(lprice~points, filter(wine,province==\"Oregon\"))\n",
        "get_regression_points(model) %>% \n",
        "  ggplot(aes(points, residual))+\n",
        "    geom_point()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Interpreting the coefficients\n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- lm(lprice~points, filter(wine,province==\"Oregon\"))\n",
        "pct = (exp(coef(model)[\"points\"]) - 1) * 100\n",
        "c(coef(model)[\"points\"],pct) \n",
        "```\n",
        "\n",
        "\n",
        "- We logged the *dependent* variable (price)\n",
        "  - A 1 point ratings increase = ``r round(pct,2)``\\%\n",
        "  - That is, a percent change in rating to an *absolute* change in the dependent variable. \n",
        "- $(e^x - 1)*100$\n",
        "\n",
        "## Interpreting the coefficients\n",
        "\n",
        "\n",
        "```{r}\n",
        "m_yr <- lm(lprice~year, filter(wine,province==\"Oregon\"))\n",
        "yr = (exp(coef(m_yr)[\"year\"]) - 1) * 100\n",
        "c(coef(m_yr)[\"year\"],yr) \n",
        "```\n",
        "\n",
        "\n",
        "- This is a *de facto* measure of inflation.\n",
        "\n",
        "## Some Examples\n",
        "\n",
        "::::{.columns}\n",
        "\n",
        ":::{.column width=50%}\n",
        "\n",
        "\n",
        "```{r}\n",
        "for (x in 1:10) {\n",
        "    print(c(x/100, (exp(x/100)-1) * 100))\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        ":::{.column width=50%}\n",
        "\n",
        "\n",
        "```{r}\n",
        "for (x in 1:10) {\n",
        "    print(c(x/010, (exp(x/010)-1) * 100))\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "## Pretty Print\n",
        "\n",
        "\n",
        "```{r}\n",
        "for(v in c(\"Chardonnay\", \"Pinot Gris\",\"Pinot Noir\")){\n",
        "  m <- lm(lprice~points, filter(wine,province==\"Oregon\", variety==v))\n",
        "  pct <- round((exp(coef(m)[\"points\"]) - 1) * 100,2)\n",
        "  print(str_c(\"For \",v,\", a 1 point ratings increase leads to a \",pct,\"% increase in price.\"))\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "## $\\log$ feature\n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- lm(price~lpoints, filter(wine,province==\"Oregon\") %>% mutate(lpoints=log(points)))\n",
        "model\n",
        "```\n",
        "\n",
        "\n",
        "- What does the *sign* (positive or negative) tell us?\n",
        "- Was $\\log$ appropriate here?\n",
        "\n",
        "## Percentages\n",
        "\n",
        "\n",
        "```{r}\n",
        "coef(model)[\"lpoints\"]/100\n",
        "```\n",
        "\n",
        "\n",
        "- Since we logged the IV (feature), a 1% ratings increase is a ~3.24 increase in price on average. \n",
        "- What are the units on that?\n",
        "\n",
        "Note: \n",
        "$$ \n",
        "x/100 \n",
        "$$\n",
        "\n",
        "## LogLog (also elasticity)\n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- lm(lprice~lpoints, filter(wine,province==\"Oregon\") %>% mutate(lpoints=log(points)))\n",
        "model\n",
        "```\n",
        "\n",
        "\n",
        "...a 1\\% increase in ratings equals a ``r round(coef(model)[\"lpoints\"],2)``\\% increase in price on average\n",
        "\n",
        "## Summary\n",
        "\n",
        "- Only the dependent/response variable is log-transformed. \n",
        "  - Exponentiate the coefficient.\n",
        "  - Subtract one from this number\n",
        "  - Multiply by 100.\n",
        "- This gives the percent increase (or decrease).\n",
        "\n",
        "## Units\n",
        "\n",
        "- Change is per one-unit increase in the independent variable. \n",
        "  - Here, independent is points.\n",
        "  - Dependent is price.\n",
        "\n",
        "## Example\n",
        "\n",
        "- For every 1% increase in the independent variable...\n",
        "  - Basically, one point\n",
        "  - Our dependent variable increases by about 8.3%.\n",
        "- A $30 bottle of wine scoring 90 would be worth $32.50 as a 91.\n",
        "\n",
        "```{r}\n",
        "30 * (1 + 8.3/100)\n",
        "```\n",
        "\n",
        "\n",
        "## Graphing points by variety\n",
        "\n",
        "```{r}\n",
        "wine %>% \n",
        "  filter(province==\"Oregon\") %>% \n",
        "  filter(variety %in% c(\"Chardonnay\",\"Pinot Noir\",\"Pinot Gris\")) %>% \n",
        "  ggplot(aes(variety,points))+\n",
        "    geom_boxplot()\n",
        "```\n",
        "\n",
        "\n",
        "## Summary\n",
        "\n",
        "```{r}\n",
        "(tmp <- wine %>% \n",
        "  filter(province==\"Oregon\") %>% \n",
        "  filter(variety %in% c(\"Chardonnay\",\"Pinot Noir\",\"Pinot Gris\")) %>% \n",
        "  group_by(variety) %>% \n",
        "  summarise(mean=mean(points)))\n",
        "```\n",
        "\n",
        "\n",
        "- What are the percentage differences here?\n",
        "\n",
        "## Regression\n",
        "\n",
        "```{r}\n",
        "model <- lm(points~variety, \n",
        "            filter(wine,province==\"Oregon\",variety %in% c(\"Chardonnay\",\"Pinot Noir\",\"Pinot Gris\")))\n",
        "get_regression_table(model)\n",
        "```\n",
        "\n",
        "\n",
        "- What types of variables are we considering here?\n",
        "\n",
        "\n",
        "## Assumptions of linear regression\n",
        "\n",
        "1. **L**inearity of relationship between variables\n",
        "2. **I**ndependence of the residuals\n",
        "3. **N**ormality of the residuals\n",
        "4. **E**quality of variance of the residuals\n",
        "\n",
        "## Linearity of relationship\n",
        "[*Credit:* Modern Dive](https://moderndive.com/5-regression.html)\n",
        "\n",
        "![](./images/non-linear.png)\n",
        "\n",
        "What would the residuals look like?\n",
        "\n",
        "## Independence\n",
        "\n",
        "- Given our original model of \n",
        "$$\n",
        "\\log(\\text{price})=m*\\text{Points}+b\n",
        "$$ \n",
        "\n",
        "- are there any problems with independence?\n",
        "- How could we check?\n",
        "\n",
        "## Normality\n",
        "\n",
        "```{r}\n",
        "model <- lm(lprice~points, filter(wine,province==\"Oregon\"))\n",
        "get_regression_points(model) %>% \n",
        "  ggplot(aes(residual))+\n",
        "    geom_histogram(color=\"white\")\n",
        "```\n",
        "\n",
        "\n",
        "## Equality of variance\n",
        "\n",
        "\n",
        "```{r}\n",
        "get_regression_points(model) %>% \n",
        "  ggplot(aes(points, residual))+\n",
        "    geom_jitter(alpha=0.2)\n",
        "```\n",
        "\n",
        "\n",
        "## No equality in the variance\n",
        "\n",
        "[*Credit:* Modern Dive](https://moderndive.com/5-regression.html) (click)\n",
        "\n",
        "![](./images/unequal-variance.png)\n",
        "\n",
        "\n",
        "# Dinner\n",
        "\n",
        "![](./images/comic3.png)\n",
        "\n",
        "# Preprocessing and BoxCox\n",
        "\n",
        "## Setup\n",
        "\n",
        "- Pivot to pinot.\n",
        "  - Say \"$\\pi^0$\"\n",
        "\n",
        "\n",
        "```{r}\n",
        "wine <- readRDS(gzcon(url(\"https://cd-public.github.io/D505/dat/pinot_orig.rds\")))\n",
        "```\n",
        "\n",
        "\n",
        "## Preprocessing\n",
        "\n",
        "- Box-Cox transformations use maximum likelihood estimate to estimate value for $\\lambda$\n",
        "\n",
        "$$\n",
        "y(\\lambda) = \\frac{x^{\\lambda}-1}{\\lambda}\n",
        "$$\n",
        "\n",
        "- The goal is to make data seem more like a normal distribution.\n",
        "\n",
        "## in R\n",
        "\n",
        "- LaTeX\n",
        "\n",
        "$$\n",
        "y(\\lambda) = \\frac{x^{\\lambda}-1}{\\lambda}\n",
        "$$\n",
        "\n",
        "- R\n",
        "\n",
        "```{r}\n",
        "y <- function(l) {\n",
        "  r <- function(x) {\n",
        "    (x ** l - 1) /l\n",
        "  }\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "## Examples\n",
        "\n",
        "- When $\\lambda=1$, there is no transformation\n",
        "\n",
        "$$\n",
        "y(1) = \\frac{x^{\\lambda}-1}{\\lambda} = \n",
        "      \\frac{x^{1}-1}{1} =\n",
        "        x-1 \\approx x\n",
        "$$\n",
        "\n",
        "$$\n",
        "f = y(-1) \\implies f(x) \\approx x\n",
        "$$\n",
        "\n",
        "## Examples\n",
        "\n",
        "- When $\\lambda=0$, it is log transformed\n",
        "\n",
        "$$\n",
        "y(0) = \\frac{x^{\\lambda}-1}{\\lambda} = \n",
        "      \\frac{x^{0}-1}{0}\n",
        "$$\n",
        "\n",
        "$$\n",
        "f = y(0) \\implies f(x) \\approx \\log(x)\n",
        "$$\n",
        "\n",
        "\n",
        "- Zero is a special case, but using a little thing called \"calculus\" this sorta makes sense.\n",
        "- Basically, negative infinity at 0, then increase slowly once positive.\n",
        "\n",
        "## $\\lambda = 0$\n",
        "\n",
        "\n",
        "```{r}\n",
        "for (x in 1:3) {\n",
        "  print(x/10)\n",
        "  for (l in 3:1) {\n",
        "    f = y(l/100)\n",
        "    print(c(l/100, x/10, f(x/10), log(x/10), f(x/10) - log(x/10)))\n",
        "  }\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "## Examples\n",
        "\n",
        "$$\n",
        "y(1) = \\frac{x^{\\lambda}-1}{\\lambda} = \n",
        "      \\frac{x^{.5}-1}{.5} =\n",
        "      2\\times(\\sqrt{x}-1) \\approx \\sqrt{x}\n",
        "$$\n",
        "\n",
        "$$\n",
        "f = y(.5) \\implies f(x) \\approx \\sqrt{x}\n",
        "$$\n",
        "\n",
        "\n",
        "## Examples\n",
        "\n",
        "- When $\\lambda=-1$, it is an inverse\n",
        "\n",
        "$$\n",
        "y(1) = \\frac{x^{\\lambda}-1}{\\lambda} = \n",
        "      \\frac{x^{-1}-1}{-1} =\n",
        "      \\frac{x^{-1}}{-1}+\\frac{-1}{-1} =\n",
        "      \\frac{1}{-x}-1 = -x\n",
        "$$\n",
        "$$\n",
        "f = y(.5) \\implies f(x) \\approx -x\n",
        "$$\n",
        "\n",
        "## Just use the function\n",
        "\n",
        "- R: envstats\n",
        "```{.r}\n",
        "library(envstats)\n",
        "\n",
        "# Example data\n",
        "data <- c(1, 2, 3, 4, 5)\n",
        "\n",
        "# Apply Box-Cox transformation\n",
        "boxcox_result <- boxcoxTransform(data)\n",
        "\n",
        "# Print the result\n",
        "print(boxcox_result)\n",
        "```\n",
        "\n",
        "\n",
        "## Just use the function\n",
        "\n",
        "- Py: scipy.stats\n",
        "```{.py}\n",
        "from scipy.stats import boxcox\n",
        "import numpy as np\n",
        "\n",
        "# Example data\n",
        "data = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Apply Box-Cox transformation\n",
        "boxcox_result, lambda_value = boxcox(data)\n",
        "\n",
        "# Print the result\n",
        "print(\"Transformed data:\", boxcox_result)\n",
        "print(\"Lambda value:\", lambda_value)\n",
        "```\n",
        "\n",
        "## On Python\n",
        "\n",
        "- I like the Python [boxcox documentation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.boxcox.html):\n",
        "\n",
        "```{.haskell}\n",
        "y = (x**lmbda - 1) / lmbda,  for lmbda != 0\n",
        "    log(x),                  for lmbda = 0\n",
        "```\n",
        "\n",
        "\n",
        "## Caret preprocessing is so easy!\n",
        "\n",
        "\n",
        "```{r}\n",
        "wine %>% \n",
        "  preProcess(method = c(\"BoxCox\",\"center\",\"scale\")) %>% \n",
        "  predict(wine) %>% \n",
        "  select(-description) %>% \n",
        "  head()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Or is it?\n",
        "\n",
        "But wait... what is wrong here?\n",
        "\n",
        "\n",
        "```{r}\n",
        "wino <- wine %>%\n",
        "  mutate(year_f = as.factor(year))\n",
        "\n",
        "wino <- wino %>% \n",
        "  preProcess(method = c(\"BoxCox\",\"center\",\"scale\")) %>% \n",
        "  predict(wino)\n",
        "\n",
        "head(wino %>% select(starts_with(\"year\")))\n",
        "```\n",
        "\n",
        "\n",
        "- Are years normally distributed?\n",
        "\n",
        "\n",
        "# The $K$NN Algorithm\n",
        "\n",
        "## Algorithm {.smaller}\n",
        "\n",
        "1. Load the data\n",
        "2. Initialize $K$ to your chosen number of neighbors\n",
        "3. For each example in the data\n",
        "  - Calculate the distance between the query example and the current example from the data.\n",
        "  - Add the distance and the index of the example to an ordered collection\n",
        "4. Sort the ordered collection of distances and indices from smallest to largest (in ascending order) by the distances\n",
        "5. Pick the first $K$ entries from the sorted collection\n",
        "6. Get the labels of the selected $K$ entries\n",
        "7. If regression, return the mean of the $K$ labels\n",
        "8. If classification, return the mode of the $K$ labels\n",
        "\n",
        "## Basis\n",
        "\n",
        "- We assume:\n",
        "  - Existing datapoints in something we think of as a space\n",
        "    - That is, probably two numerical value per point in a coordinate plane\n",
        "    - Categorical is fine - think a Punnett square\n",
        "  - Existing datapoints are labelled\n",
        "    - Numerical or categorical still fine!\n",
        "- To visualize, we will have a 2d space with color labels.\n",
        "\n",
        "## Let's draw it\n",
        "\n",
        "<a  title=\"Antti Ajanki AnAj, CC BY-SA 3.0 &lt;http://creativecommons.org/licenses/by-sa/3.0/&gt;, via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:KnnClassification.svg\"><img style=\"background-color:white;\" width=\"50%\" alt=\"KnnClassification\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/KnnClassification.svg/256px-KnnClassification.svg.png?20101222011435\"></a>\n",
        "\n",
        "## Let's draw it 2\n",
        "\n",
        "\n",
        "<a title=\"Paolo Bonfini, CC BY-SA 4.0 &lt;https://creativecommons.org/licenses/by-sa/4.0&gt;, via Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:KNN_decision_surface_animation.gif\"><img width=\"100%\" alt=\"KNN decision surface animation\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/KNN_decision_surface_animation.gif/512px-KNN_decision_surface_animation.gif?20240718130312\"></a>\n",
        "\n",
        "## Let's draw it 3\n",
        "\n",
        "\n",
        "![](https://media.geeksforgeeks.org/wp-content/uploads/20231207103856/KNN-Algorithm-(1).png)\n",
        "\n",
        "[G4G](https://www.geeksforgeeks.org/k-nearest-neighbours/)\n",
        "\n",
        "## Engineering some features\n",
        "\n",
        "- Create an \"other\" for most tasters.\n",
        "\n",
        "\n",
        "```{r}\n",
        "wino <- wino %>% \n",
        "  mutate(taster_name = fct_lump(taster_name,5))\n",
        "```\n",
        "\n",
        "\n",
        "## Engineering some features\n",
        "\n",
        "- Create dummys for years, tasters\n",
        "\n",
        "```{r}\n",
        "wino <- wino %>% dummy_cols(\n",
        "    select_columns = c(\"year_f\",\"taster_name\"),\n",
        "    remove_most_frequent_dummy = T, \n",
        "    remove_selected_columns = T)\n",
        "```\n",
        "\n",
        "\n",
        "## Engineering some features\n",
        "\n",
        "- Convert everything to snake case.\n",
        "\n",
        "\n",
        "```{r}\n",
        "wino <- wino %>% \n",
        "  rename_all(funs(tolower(.))) %>% \n",
        "  rename_all(funs(str_replace_all(., \"-\", \"_\"))) %>% \n",
        "  rename_all(funs(str_replace_all(., \" \", \"_\")))\n",
        "```\n",
        "\n",
        "\n",
        "## Engineering some features\n",
        "\n",
        "- Add indicators for 3 tasting notes.\n",
        "\n",
        "\n",
        "```{r}\n",
        "wino <- wino %>% \n",
        "  mutate(note_cherry = str_detect(description,\"cherry\")) %>% \n",
        "  mutate(note_chocolate = str_detect(description,\"chocolate\")) %>%\n",
        "  mutate(note_earth = str_detect(description,\"earth\")) %>%\n",
        "  select(-description)\n",
        "```\n",
        "\n",
        "\n",
        "## Engineering some features\n",
        "\n",
        "- Let's see it\n",
        "\n",
        "\n",
        "```{r}\n",
        "head(wino) %>% \n",
        "  select(1:6)\n",
        "```\n",
        "\n",
        "\n",
        "## Split\n",
        "\n",
        "\n",
        "```{r}\n",
        "set.seed(505)\n",
        "wine_index <- createDataPartition(wino$province, p = 0.8, list = FALSE)\n",
        "train <- wino[ wine_index, ]\n",
        "test <- wino[-wine_index, ]\n",
        "```\n",
        "\n",
        "\n",
        "## Simple model\n",
        "\n",
        "- Specify a $K$NN model.\n",
        "\n",
        "\n",
        "```{r}\n",
        "fit <- knn(\n",
        "  train = select(train,-province), \n",
        "  test = select(test,-province), \n",
        "  k=5, \n",
        "  cl = train$province)\n",
        "```\n",
        "\n",
        "\n",
        "## Confusion matrix\n",
        "\n",
        "- Let's look at Kappa.\n",
        "\n",
        "\n",
        "```{r}\n",
        "confusionMatrix(fit,factor(test$province))$overall\n",
        "```\n",
        "\n",
        "\n",
        "## [Kappa $\\kappa$ statistic](https://pmc.ncbi.nlm.nih.gov/articles/PMC4916348/)\n",
        "\n",
        "> Kappa statistic is a measurement of the agreement for categorical items Kappa can be used to assess the performance of kNN algorithm.\n",
        "\n",
        "$$\n",
        "\\kappa = \\dfrac{P(A)-P(E)}{1 - P(E)}\n",
        "$$\n",
        "\n",
        "> where $P(A)$ is the relative observed agreement among raters, and $P(E)$ is the proportion of agreement expected between the classifier and the ground truth by chance.\n",
        "\n",
        "## Kappa $\\kappa$ statistic\n",
        "\n",
        "Compares observed accuracy against what would be expected by a random classifier. \n",
        "\n",
        "- \\< 0.2 (not so good)\n",
        "- 0.21 - 0.4 (ok)\n",
        "- 0.41 - 0.6 (pretty good)\n",
        "- 0.6 - 0.8 (great)\n",
        "- \\> 0.8 (almost perfect)\n",
        "\n",
        "...whoa! What's going on here?\n",
        "\n",
        "\n",
        "# Overfitting... or a leak?\n",
        "\n",
        "## Review the dataframe\n",
        "\n",
        "\n",
        "```{r}\n",
        "summary(wino)\n",
        "```\n",
        "\n",
        "\n",
        "## Determine what dominates\n",
        "\n",
        "\n",
        "```{r}\n",
        "omit <- function(prefix) {\n",
        "  train <- select(train, -starts_with(prefix))\n",
        "  test <- select(test, -starts_with(prefix))\n",
        "  fit <- knn(\n",
        "    train = select(train,-province), \n",
        "    test = select(test,-province), \n",
        "    k=5, \n",
        "    cl = train$province)\n",
        "  confusionMatrix(fit,factor(test$province))$overall\n",
        "}\n",
        "```\n",
        "\n",
        "\n",
        "## Test\n",
        "\n",
        "\n",
        "```{r}\n",
        "c(omit('year')[\"Kappa\"], omit('note')[\"Kappa\"], omit('taster')[\"Kappa\"])\n",
        "```\n",
        "\n",
        "\n",
        "## Fixing the leak\n",
        "\n",
        "- Dastardly humans, always existing in a physical location.\n",
        "\n",
        "\n",
        "```{r}\n",
        "train <- select(train, -starts_with(\"taster\"))\n",
        "test <- select(test, -starts_with(\"taster\"))\n",
        "```\n",
        "\n",
        "\n",
        "## Rerun\n",
        "\n",
        "\n",
        "```{r}\n",
        "fit <- knn(\n",
        "  train = select(train,-province), \n",
        "  test = select(test,-province), \n",
        "  k=5, \n",
        "  cl = train$province)\n",
        "```\n",
        "\n",
        "\n",
        "## Confusion matrix\n",
        "\n",
        "\n",
        "```{r}\n",
        "confusionMatrix(fit,factor(test$province))\n",
        "```\n",
        "\n",
        "\n",
        "## With parameter tuning over $K$\n",
        "\n",
        "\n",
        "```{r}\n",
        "fit <- train(province ~ .,\n",
        "             data = train, \n",
        "             method = \"knn\",\n",
        "             tuneLength = 15,\n",
        "             trControl = trainControl(number = 1)) # default bootstrap\n",
        "fit\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Confusion Matrix\n",
        "\n",
        "```{r}\n",
        "confusionMatrix(predict(fit, test),factor(test$province))\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Tuning and subsampling\n",
        "\n",
        "\n",
        "```{r}\n",
        "fit <- train(province ~ .,\n",
        "             data = train, \n",
        "             method = \"knn\",\n",
        "             tuneLength = 15,\n",
        "             metric = \"Kappa\", # this is new\n",
        "             trControl = trainControl(number = 1))\n",
        "fit\n",
        "```\n",
        "\n",
        "\n",
        "## Tuning plot\n",
        "\n",
        "\n",
        "```{r}\n",
        "ggplot(fit, metric=\"Kappa\")\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Group modeling problem I\n",
        "\n",
        "* Practice running different versions of the model\n",
        "* Create some new features and...\n",
        "* See if you can achieve a Kappa >= 0.5!\n",
        "\n",
        "$$\n",
        "\\kappa \\geq 0.5\n",
        "$$\n",
        "\n",
        "\n",
        "## Bonus: KNN for regression\n",
        "\n",
        "\n",
        "```{r}\n",
        "fit <- train(price ~ .,\n",
        "             data = train, \n",
        "             method = \"knn\",\n",
        "             tuneLength = 15,\n",
        "             trControl = trainControl(number = 1))\n",
        "fit\n",
        "\n",
        "```"
      ],
      "id": "1713c2df"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\AsuS\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}